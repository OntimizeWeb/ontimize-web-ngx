@use "sass:map";
@use 'src/styles/flat/variables.scss';

@mixin ontimize-flat-styles($theme, $color_states:null) {
  $background: map.get($theme, background);
  $foreground: map.get($theme, foreground);
  @include set-color-states($color_states);

  .text-muted {
    color: variables.$default-color;
  }

  .text-inverse {
    color: white;
  }

  .text-primary {
    color: variables.$primary-color;
  }

  .text-warning {
    color: variables.$warning-color;
  }

  .text-danger {
    color: variables.$danger-color;
  }

  .text-success {
    color: variables.$success-color;
  }

  .text-info {
    color: variables.$info-color;
  }

  a.text-danger:hover,
  a.text-inverse:hover,
  a.text-muted:hover,
  a.text-primary:hover,
  a.text-success:hover,
  a.text-warning:hover {
    opacity: .85;
  }

  .o-form .o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools .o-form-toolbar-button.mat-stroked-button,
  button.mat-button-base:not(.mat-icon-button):not(.mat-fab):not(.mat-mini-fab) {
    min-width: 132px;
  }

  /* Generic button class */
  @include o-button-class();

  /* MATERIAL BUTTON STYLES*/
  button,
  button.mat-button,
  button.mat-stroked-button {
    &:not(.mat-icon-button):not(.mat-fab):not(.mat-mini-fab) {
      border-radius: 0;
    }

    &:hover {
      .mat-button-focus-overlay {
        opacity: .10;
      }
    }

  }

  /* O-BUTTON STYLES */
  .o-button {
    border: none;
    border-radius: 0;

    &.o-button-danger,
    &.o-button-default,
    &.o-button-info,
    &.o-button-primary,
    &.o-button-success,
    &.o-button-warning {
      button {
        color: white;
      }
    }

    &.o-button-info button {
      background-color: variables.$info-color;
    }

    &.o-button-default button {
      background-color: variables.$default-color;
    }

    &.o-button-success button {
      background-color: variables.$success-color;
    }

    &.o-button-primary button {
      background-color: variables.$primary-color;
    }

    &.o-button-danger button {
      background-color: variables.$danger-color;
    }

    &.o-button-warning button {
      background-color: variables.$warning-color;
    }
  }

  .o-form .o-form-toolbar-header.mat-toolbar .o-form-toolbar-button,
  .ontimize-table.o-table .o-table-button button.mat-stroked-button {
    &[disabled] {
      opacity: .65;
      color: rgba(255, 255, 255, 0.65);
    }
  }

  .ontimize-table.o-table {
    .o-table-button {
      button.mat-stroked-button {
        border: 0;
      }

      button {
        color: white;
        border: none;
      }

      &.o-table-button-add button {
        background-color: variables.$primary-color;
      }

      &.o-table-button-refresh button {
        background-color: variables.$default-color;
      }

      &.o-table-button-delete button {
        background-color: variables.$danger-color;
      }
    }

    div.o-table-container {
      border-radius: 0;
    }
  }

  .o-form {
    .o-form-toolbar-header.mat-toolbar {
      border-radius: 0;
    }

    .o-form-toolbar>.mat-toolbar {
      .mat-stroked-button {
        border: none;
      }

      button.mat-button.o-form-toolbar-button,
      button.o-form-toolbar-button {

        &:not([disabled]),
        &[disabled] {
          color: #fff;
        }

        &.o-form-toolbar-button-insert,
        &.o-form-toolbar-button-new,
        &.o-form-toolbar-button-save {
          background-color: variables.$primary-color;
        }

        &.o-form-toolbar-button-refresh {
          background-color: variables.$default-color;
        }

        &.o-form-toolbar-button-cancel,
        &.o-form-toolbar-button-delete {
          background-color: variables.$danger-color;
        }

        &.o-form-toolbar-button-undo {
          background-color: variables.$warning-color;
        }
      }
    }
  }

  o-app-sidenav.o-app-sidenav,
  o-app-sidenav.o-app-sidenav.header-layout {
    .o-app-sidenav-container {
      .o-app-header {
        box-shadow: none;
        border-bottom: 1px solid mat.get-color-from-palette($foreground, divider);
      }

      mat-sidenav.mat-drawer.o-app-sidenav-sidenav {
        box-shadow: none;
        border-right: 1px solid mat.get-color-from-palette($foreground, divider);

        .o-app-sidenav-menugroup.active+.o-app-sidenav-menugroup-items-container ul {
          box-shadow: none;
          background: none;
        }
      }
    }

    .mat-menu-panel {
      border: 1px solid mat.get-color-from-palette($foreground, divider);
    }

    .o-app-header {
      .o-user-info {
        .o-user-info-wrapper {
          font-weight: 500;
          color: white;
        }
      }
    }
  }

  //TABS
  .mat-tab-group.o-tab-ontimize {

    .mat-tab-header .mat-tab-label-container .mat-tab-list .mat-tab-label,
    div.mat-tab-body-wrapper {
      border-radius: 0;
      padding: 0;
    }
  }

  //o-row, o-column
  o-column.o-column,
  o-row.o-row {
    background: mat.get-color-from-palette($background, background);
    border-radius: 4px;

    .o-container {
      .o-container-title {
        padding: 20px 0;

        span {
          color: mat.get-color-from-palette($foreground, text);
          font-weight: 500;
        }
      }
    }
  }

  //dialog
  .o-dialog-class {
    mat-dialog-container.mat-dialog-container {
      .mat-dialog-title {
        border-bottom-color: variables.$default-color;
      }

      .mat-dialog-actions {
        @include o-button-class();

        button.mat-button-base[ng-reflect-dialog-result="0"],
        button.mat-button-base[ng-reflect-dialog-result="true"] {
          color: white;
          background-color: variables.$primary-color;
        }

        button.mat-button-base[ng-reflect-dialog-result="1"],
        button.mat-button-base[ng-reflect-dialog-result="false"] {
          color: white;
          background-color: variables.$default-color;
        }
      }
    }
  }
}

@mixin o-button-class() {
  button {

    &.o-button-danger,
    &.o-button-default,
    &.o-button-info,
    &.o-button-primary,
    &.o-button-success,
    &.o-button-warning {
      border: none;
      border-radius: 0;
      color: white;
    }

    &.o-button-info {
      background-color: variables.$info-color;
    }

    &.o-button-default {
      background-color: variables.$default-color;
    }

    &.o-button-success {
      background-color: variables.$success-color;
    }

    &.o-button-primary {
      background-color: variables.$primary-color;
    }

    &.o-button-danger {
      background-color: variables.$danger-color;
    }

    &.o-button-warning {
      background-color: variables.$warning-color;
    }
  }
}

@mixin set-color-states($color_states) {
  @if $color_states !=null {
    variables.$success-color: if(map.has-key($color_states, success), map.get($color_states, success), variables.$success-color) !global;
    variables.$danger-color: if(map.has-key($color_states, danger), map.get($color_states, danger), variables.$danger-color) !global;
    variables.$primary-color: if(map.has-key($color_states, primary), map.get($color_states, primary), variables.$primary-color) !global;
    variables.$warning-color: if(map.has-key($color_states, warning), map.get($color_states, warning), variables.$warning-color) !global;
    variables.$info-color: if(map.get($color_states, info), map.get($color_states, info), variables.$info-color) !global;
    variables.$default-color: if(map.has-key($color_states, default), map.get($color_states, default), variables.$default-color) !global;
    variables.$inverse-color: if(map.has-key($color_states, inverse), map.get($color_states, inverse), variables.$inverse-color) !global;
    variables.$disable-color: if(map.has-key($color_states, disable), map.get($color_states, disable), variables.$disable-color) !global;
  }
}